"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{"default":e}};Object.defineProperty(exports,"__esModule",{value:!0});const Unauthorized_1=__importDefault(require("./Exception/Unauthorized")),User_1=__importDefault(require("@/Models/Database/Entities/User")),Encryptor_1=require("@/Models/Encryptor"),Exception_1=__importDefault(require("./Exception")),zod_1=__importDefault(require("zod"));class User{id;username;email;constructor(e){this.id=e.id,this.username=e.username,this.email=e.email}static async create(e){throw new Exception_1["default"]("Sorry we are not accepte new acounts")}static async login(e){var{username:e,password:t}=zod_1["default"].object({username:zod_1["default"].string().min(4).max(16),password:zod_1["default"].string().min(4).max(16)}).parse(e),e=await User_1["default"].findOneBy({username:e});if(e&&await e.verifyPassword(t))return new this(e);throw new Unauthorized_1["default"]("Username or password incorrect")}static async authentication(e){try{var t=Encryptor_1.Signer.verify(zod_1["default"].string().parse(e)),r=await User_1["default"].findOneByOrFail({id:t.id})}catch{throw new Unauthorized_1["default"]}return new this(r)}createAuthorization(){return Encryptor_1.Signer.sign({id:this.id})}}exports["default"]=User;