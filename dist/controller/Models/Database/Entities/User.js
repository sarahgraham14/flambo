"use strict";var __decorate=this&&this.__decorate||function(e,t,r,a){var o,s=arguments.length,i=s<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,r):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,r,a);else for(var _=e.length-1;0<=_;_--)(o=e[_])&&(i=(s<3?o(i):3<s?o(t,r,i):o(t,r))||i);return 3<s&&i&&Object.defineProperty(t,r,i),i},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{"default":e}};Object.defineProperty(exports,"__esModule",{value:!0});const typeorm_1=require("typeorm"),Entity_1=__importDefault(require("@/Tools/Database/Entity")),bcrypt_1=__importDefault(require("bcrypt")),Role_1=__importDefault(require("./Role"));let User=class User extends Entity_1["default"]{async setPassword(e){this.password=await bcrypt_1["default"].hash(e,10)}async verifyPassword(e){return bcrypt_1["default"].compare(e,this.password)}async hasPermission(e){var t=await Role_1["default"].findOneBy({users:[{id:this.id}]});return!!t&&await t.hasPermission(e)}};__decorate([(0,typeorm_1.Column)({type:"varchar",nullable:!1,unique:!0}),__metadata("design:type",String)],User.prototype,"username",void 0),__decorate([(0,typeorm_1.Column)({type:"varchar",nullable:!1,unique:!0}),__metadata("design:type",String)],User.prototype,"email",void 0),__decorate([(0,typeorm_1.Column)({type:"text",nullable:!1}),__metadata("design:type",String)],User.prototype,"password",void 0),__decorate([(0,typeorm_1.ManyToOne)(()=>Role_1["default"],e=>e.users),__metadata("design:type",Object)],User.prototype,"role",void 0),User=__decorate([(0,typeorm_1.Entity)()],User),exports["default"]=User;