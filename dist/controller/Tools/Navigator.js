"use strict";var __importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{"default":t}};Object.defineProperty(exports,"__esModule",{value:!0});const fs_1=require("fs"),promises_1=require("fs/promises"),path_1=require("path"),child_process_1=require("child_process"),archiver_1=__importDefault(require("archiver"));class Navigator{directory;options;ignores;constructor(t=".",i){if(this.directory=(0,path_1.resolve)(t),this.options=i,!(0,fs_1.existsSync)(this.directory)||!(0,fs_1.lstatSync)(this.directory).isDirectory()){if(!this.options?.force)throw new Error(`Can't found "${this.directory}" directory, use force options to create`);(0,fs_1.mkdirSync)(this.directory,{recursive:!0})}}go(t){t=(0,path_1.join)(this.directory,t);if((0,fs_1.lstatSync)(t).isDirectory())return this.directory=t,this;throw new Error(`Not found ${t} directory`)}back(t=1){var i=this.directory.split(path_1.sep);return this.directory=i.slice(0,i.length-t).join(path_1.sep),this}make(t){return(0,fs_1.mkdirSync)((0,path_1.join)(this.directory,t),{recursive:!0}),this.go(t)}ignore(t){return this.ignores=t,this}inIgnores(i){return!!this.ignores&&!!this.ignores.find(t=>i.startsWith(t)||"*"+(0,path_1.extname)(i)===t)}async scan(t,i=this.directory,r){for(const o of await(0,promises_1.readdir)(i)){var s,e=r?r+"/"+o:o,a=(0,path_1.join)(i,o);this.inIgnores(e)||((s=(0,fs_1.lstatSync)(a).isDirectory())&&await this.scan(t,a,e),await t({isDirectory:s,subPath:e,fullPath:a}))}}async clear(){await this.scan(async({isDirectory:t,fullPath:i})=>{t&&0===(0,fs_1.readdirSync)(i).length?await(0,promises_1.rmdir)(i):t||await(0,promises_1.unlink)(i)})}async"delete"(){await this.clear(),0===(0,fs_1.readdirSync)(this.directory).length&&await(0,promises_1.rmdir)(this.directory)}async copy(s){const e=(0,path_1.resolve)(s);await(0,promises_1.mkdir)(e,{recursive:!0}),await this.scan(async({isDirectory:t,subPath:i,fullPath:r})=>{t||r.startsWith(e)||(t=(0,path_1.dirname)((0,path_1.join)(s,i)),(0,fs_1.existsSync)(t)||await(0,promises_1.mkdir)(t,{recursive:!0}),await(0,promises_1.copyFile)(r,(0,path_1.join)(s,i)))})}async move(t){await this.copy(t),await this["delete"]()}async compress(t){const s=(0,path_1.resolve)(t);await(0,promises_1.mkdir)((0,path_1.dirname)(s),{recursive:!0});t=(0,fs_1.createWriteStream)(s);const e=(0,archiver_1["default"])("zip",{zlib:{level:9}});e.pipe(t),await this.scan(async({isDirectory:t,subPath:i,fullPath:r})=>{t||r.startsWith(s)||e.file(r,{name:i})}),await e.finalize()}execute(t,i={}){t=t.split(" "),t=(0,child_process_1.spawnSync)(t[0],t.slice(1),{stdio:"inherit",shell:!0,cwd:this.directory,env:{...process.env,...i}});return t.status&&0!==t.status&&process.exit(t.status),this}}exports["default"]=Navigator;